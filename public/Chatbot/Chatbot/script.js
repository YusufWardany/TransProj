const chatBody = document.querySelector(".chat-body");
const messageInput = document.querySelector(".message-input");
const sendMessageButton = document.querySelector("#send-message");
const chatbotToggler = document.querySelector("#chatbot-toggler");
const closeChatbotBtn = document.querySelector("#close-chatbot");
const startRecordingBtn = document.getElementById('start-recording');
const playResponseBtn = document.getElementById('play-response');

// API SETUP
const API_KEY = "AIzaSyA3zGWAMiGArMRYERr5cc77bQvabv2aNbI";
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

const userData = {
    message: null
}

// Initialize chatbot with quick questions buttons
document.querySelectorAll('.quick-question-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
        const question = e.target.getAttribute('data-question');
        messageInput.value = question;
        // Auto send the question
        setTimeout(() => {
            const event = new Event('submit', { bubbles: true });
            document.querySelector('.chat-form').dispatchEvent(event);
        }, 100);
    });
});

// create message element with dynamic classes and return it
const createMessageElement = (content, ...classes) => {
    const div = document.createElement("div");
    div.classList.add("message", ...classes);
    div.innerHTML = content;
    return div;
}

// Voice Recognition
function setupVoiceRecognition() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.lang = 'ar-EG'; // Arabic (Egypt)
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;

        startRecordingBtn.addEventListener('click', () => {
            try {
                recognition.start();
                startRecordingBtn.classList.add('recording');
                startRecordingBtn.innerHTML = 'mic_off';
                messageInput.placeholder = "ุฌุงุฑู ุงูุงุณุชูุงุน...";
            } catch (e) {
                console.error("Error starting recognition:", e);
                showError("ุญุฏุซ ุฎุทุฃ ูู ุชุดุบูู ุงููููุฑูููู");
            }
        });

        recognition.onresult = (event) => {
            const speechText = event.results[0][0].transcript;
            messageInput.value = speechText;
            startRecordingBtn.classList.remove('recording');
            startRecordingBtn.innerHTML = 'mic';
            messageInput.placeholder = "ุงูุชุจ ุฑุณุงูุชู ููุง...";
            
            // Auto-send the voice message
            if (speechText.trim().length > 0) {
                const event = new Event('submit', { bubbles: true });
                document.querySelector('.chat-form').dispatchEvent(event);
            }
        };

        recognition.onerror = (event) => {
            console.error('Recognition error:', event.error);
            startRecordingBtn.classList.remove('recording');
            startRecordingBtn.innerHTML = 'mic';
            messageInput.placeholder = "ุงูุชุจ ุฑุณุงูุชู ููุง...";
            
            let errorMessage = "ุญุฏุซ ุฎุทุฃ ูู ุงูุชุนุฑู ุนูู ุงูุตูุช";
            if (event.error === 'no-speech') {
                errorMessage = "ูู ูุชู ุงููุดู ุนู ุตูุช";
            } else if (event.error === 'not-allowed') {
                errorMessage = "ูุฌุจ ุงูุณูุงุญ ุจุงุณุชุฎุฏุงู ุงููููุฑูููู";
            }
            
            showError(errorMessage);
        };

        recognition.onend = () => {
            if (startRecordingBtn.classList.contains('recording')) {
                startRecordingBtn.classList.remove('recording');
                startRecordingBtn.innerHTML = 'mic';
                messageInput.placeholder = "ุงูุชุจ ุฑุณุงูุชู ููุง...";
            }
        };
    } else {
        startRecordingBtn.disabled = true;
        startRecordingBtn.title = "API ุงูุชุนุฑู ุนูู ุงูุตูุช ุบูุฑ ูุฏุนูู ูู ูุฐุง ุงููุชุตูุญ";
        console.warn('Speech Recognition API not supported');
    }
}

// Text-to-Speech
function speakText(text) {
    if ('speechSynthesis' in window) {
        // Stop any current speech
        window.speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ar-SA'; // Arabic (Saudi Arabia)
        utterance.rate = 0.9; // Slower speed for better clarity
        utterance.pitch = 1;
        utterance.volume = 1;
        
        // Find Arabic voice if available
        const voices = window.speechSynthesis.getVoices();
        const arabicVoice = voices.find(voice => voice.lang.includes('ar'));
        if (arabicVoice) {
            utterance.voice = arabicVoice;
        }
        
        utterance.onstart = () => {
            playResponseBtn.innerHTML = 'volume_off';
        };
        
        utterance.onend = () => {
            playResponseBtn.innerHTML = 'volume_up';
        };
        
        window.speechSynthesis.speak(utterance);
    } else {
        showError("ููุฒุฉ ุชุญููู ุงููุต ุฅูู ููุงู ุบูุฑ ูุฏุนููุฉ ูู ูุชุตูุญู");
        console.warn('Speech Synthesis API not supported');
    }
}

// Initialize speech synthesis voices
if ('speechSynthesis' in window) {
    window.speechSynthesis.onvoiceschanged = () => {
        console.log("Voices loaded:", window.speechSynthesis.getVoices());
    };
    
    // Chrome needs this
    if (window.speechSynthesis.getVoices().length === 0) {
        window.speechSynthesis.addEventListener('voiceschanged', () => {
            console.log("Voices loaded after event:", window.speechSynthesis.getVoices());
        });
    }
}

// Show error message
function showError(message) {
    const errorMessage = createMessageElement(
        `<div class="message-text">${message}</div>`,
        "bot-message"
    );
    chatBody.appendChild(errorMessage);
    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
}

const generateBotResponse = async (incomingMessageDiv) => {
    const messageElement = incomingMessageDiv.querySelector(".message-text");
    
    // ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ ุนู ูุธุงู ุญุฌุฒ ุงูููุงุตูุงุช NILEWAY
    const faqResponses = {
        "ููู ุงุญุฌุฒ": `ููููู ุงูุญุฌุฒ ูู NILEWAY ุนุจุฑ ุงูุฎุทูุงุช ุงูุชุงููุฉ:
        1. ุงุฎุชุฑ ููุน ุงููุณููุฉ (ุฃุชูุจูุณ/ูุทุงุฑ/ุทูุฑุงู)
        2. ุญุฏุฏ ุงููุญุทุฉ ุฃู ุงููุทุงุฑ
        3. ุงุฎุชุฑ ุงูุชุงุฑูุฎ ูุงูููุช
        4. ุญุฏุฏ ุนุฏุฏ ุงูุฑูุงุจ
        5. ุฃููู ุนูููุฉ ุงูุฏูุน
        
        ููููู ุงูุจุฏุก ูู <a href="/bus-booking" style="color: #FFD700; text-decoration: underline;">ุตูุญุฉ ุงูุญุฌุฒ</a>`,
        
        "ูุณุงุฆู ุงูููุงุตูุงุช ุงููุชุงุญุฉ": `ูู NILEWAY ูููุฑ:
        - ุญุงููุงุช ููููุฉ ูุงุฎุฑุฉ
        - ูุทุงุฑุงุช ุจุฏุฑุฌุงุช ูุฎุชููุฉ (VIP/ุฏุฑุฌุฉ ุฃููู/ุฏุฑุฌุฉ ุซุงููุฉ)
        - ุฑุญูุงุช ุทูุฑุงู ุฏุงุฎููุฉ
        
        ุฌููุน ูุณุงุฆููุง ูุฒูุฏุฉ ุจุฃุนูู ูุนุงููุฑ ุงูุฑุงุญุฉ ูุงูุฃูุงู.`,
        
        "ุทุฑู ุงูุฏูุน": `ุทุฑู ุงูุฏูุน ุงููุชุงุญุฉ:
        ๐ณ ุจุทุงูุงุช ุงูุงุฆุชูุงู ูุงูุฎุตู (Visa/MasterCard)
        ๐ฑ ุงููุญุงูุธ ุงูุฅููุชุฑูููุฉ (ููุฏุงููู ูุงุด/ุญุณุงุจ ููุฑู)
        ๐ต ุงูุฏูุน ููุฏุงู ุนูุฏ ุงูุตุนูุฏ (ููุญุงููุงุช ููุท)
        ๐ฆ ุงูุชุญููู ุงูุจููู`,
        
        "ุฅูุบุงุก ุงูุญุฌุฒ": `ุณูุงุณุฉ ุงูุฅูุบุงุก ูู NILEWAY:
        - ูููู ุงูุฅูุบุงุก ูุจู 24 ุณุงุนุฉ ูู ุงูุฑุญูุฉ ุจุฏูู ุฑุณูู
        - ุจุนุฏ ุฐูู ูุชู ุฎุตู 20% ูู ุงููุจูุบ
        - ููุฅูุบุงุก ุงุชุตู ุจูุง ุนูู 16388 ุฃู ูู ุฎูุงู ุญุณุงุจู
        
        <a href="/contact" style="color: #FFD700; text-decoration: underline;">ุงุชุตู ุจูุง ููุฅูุบุงุก ุงูุทุงุฑุฆ</a>`,
        
        "ุชุชุจุน ุงูุญุฌุฒ": `ูุชุชุจุน ุญุฌุฒู:
        1. ุณุฌู ุงูุฏุฎูู ุฅูู ุญุณุงุจู
        2. ุงูุชูู ุฅูู ูุณู "ุญุฌูุฒุงุชู"
        3. ุงุฎุชุฑ ุงูุญุฌุฒ ุงููุทููุจ
        
        ุฃู ุฃุฏุฎู <a href="/track-booking" style="color: #FFD700; text-decoration: underline;">ุฑูู ุงูุญุฌุฒ ููุง</a>`,
        
        "ุนุฑูุถ": `ูุฏููุง ุนุฑูุถ ุฎุงุตุฉ ุญุงููุฉ:
        - ุฎุตู 15% ุนูู ุงูุญุฌุฒ ุงููุจูุฑ (ูุจู 7 ุฃูุงู)
        - ุฎุตู 20% ูููุฌููุนุงุช (ุฃูุซุฑ ูู 5 ุฃุดุฎุงุต)
        - ุฑุญูุงุช ุฐูุงุจ ูุนูุฏุฉ ุจุฎุตู 25%
        
        <a href="/offers" style="color: #FFD700; text-decoration: underline;">ุดุงูุฏ ุฌููุน ุงูุนุฑูุถ</a>`,
        
        "ุงูุฃุณุนุงุฑ": `ุฃุณุนุงุฑูุง ุชุจุฏุฃ ูู:
        - ุงูุญุงููุงุช: 50 ุฌููู ููููุนุฏ
        - ุงููุทุงุฑุงุช: 75 ุฌููู ููุฏุฑุฌุฉ ุงูุซุงููุฉ
        - ุงูุทูุฑุงู: 500 ุฌููู ููุฑุญูุฉ
        
        ุงูุฃุณุนุงุฑ ุชุฎุชูู ุญุณุจ ุงูููุณู ูููุช ุงูุญุฌุฒ.`,
        
        "ุชุณุฌูู ุฏุฎูู": `ูุชุณุฌูู ุงูุฏุฎูู:
        1. ุงุถุบุท ุนูู "ุชุณุฌูู ุงูุฏุฎูู" ูู ุงูุฃุนูู
        2. ุฃุฏุฎู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ููููุฉ ุงูุณุฑ
        3. ุงุถุบุท ุฏุฎูู
        
        <a href="/login" style="color: #FFD700; text-decoration: underline;">ุงูุชูู ูุตูุญุฉ ุชุณุฌูู ุงูุฏุฎูู</a>`,
        
        "ุฅูุดุงุก ุญุณุงุจ": `ูุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ:
        1. ุงุถุบุท ุนูู "ุฅูุดุงุก ุญุณุงุจ" ูู ุงูุฃุนูู
        2. ุงููุฃ ุงูุจูุงูุงุช ุงููุทููุจุฉ
        3. ุณุฌู ุงูุฏุฎูู ููุฑุงู
        
        <a href="/register" style="color: #FFD700; text-decoration: underline;">ุณุฌู ุญุณุงุจู ุงูุขู</a>`,
        
        "ุฎุฏูุฉ ุงูุนููุงุก": `ููุชูุงุตู ูุน ุฎุฏูุฉ ุงูุนููุงุก:
        ๐ 16388 (24/7)
        ๐ง support@nileway.com
        ๐ฌ <a href="/contact" style="color: #FFD700; text-decoration: underline;">ูููุฐุฌ ุงูุชูุงุตู</a>
        
        ูุชุงุญูู ููุณุงุนุฏุชู ุนูู ูุฏุงุฑ ุงูุณุงุนุฉ!`,
        
        "ุงูุชููููุงุช": `ููููู ุฑุคูุฉ ุขุฑุงุก ุนููุงุฆูุง:
        - <a href="/feedback" style="color: #FFD700; text-decoration: underline;">ุตูุญุฉ ุงูุชููููุงุช</a>
        - ุชููููุงุช Google
        - ุตูุญุชูุง ุนูู Facebook
        
        ูุญุฑุต ุนูู ุฑุถุงูู ุฏุงุฆูุงู!`,
        
        "ุฃูุงูู ุณูุงุญูุฉ": `ุฃุดูุฑ ุงูุฃูุงูู ุงูุชู ูุฎุฏููุง:
        - ุงููุงูุฑุฉ (ุงูุฃูุฑุงูุงุช - ุงููุชุญู ุงููุตุฑู)
        - ุงูุฅุณููุฏุฑูุฉ (ููุนุฉ ูุงูุชุจุงู - ููุชุจุฉ ุงูุฅุณููุฏุฑูุฉ)
        - ุดุฑู ุงูุดูุฎ (ุฎููุฌ ูุนูุฉ - ุฑุฃุณ ูุญูุฏ)
        - ุงูุฃูุตุฑ (ูุนุงุจุฏ ุงููุฑูู - ูุงุฏู ุงููููู)
        
        <a href="/tourism" style="color: #FFD700; text-decoration: underline;">ุงูุชุดู ุฑุญูุงุชูุง ุงูุณูุงุญูุฉ</a>`,
        
        "ุญุงููุงุช": `ุญุงููุงุช NILEWAY:
        - ููููุฉ ุจุงููุงูู
        - ููุงุนุฏ ูุงุณุนุฉ ููุฑูุญุฉ
        - ุฎุฏูุฉ ุงููุงู ูุงู ุงููุฌุงููุฉ
        - ููุงุท ุงูุทูุงู ูู ุฌููุน ุงููุญุงูุธุงุช
        - ุฃุณุนุงุฑ ุชุจุฏุฃ ูู 50 ุฌููู
        
        <a href="/bus-booking" style="color: #FFD700; text-decoration: underline;">ุงุญุฌุฒ ููุนุฏู ุงูุขู</a>`,
        
        "ูุทุงุฑุงุช": `ูุทุงุฑุงุช NILEWAY:
        - ุฏุฑุฌุฉ VIP (ุฎุฏูุฉ ูุงุฎุฑุฉ)
        - ุฏุฑุฌุฉ ุฃููู (ููุงุนุฏ ูุฑูุญุฉ)
        - ุฏุฑุฌุฉ ุซุงููุฉ (ุฃุณุนุงุฑ ุงูุชุตุงุฏูุฉ)
        - ูุฌุจุงุช ุฎูููุฉ ูุชุงุญุฉ
        - ููุงุนูุฏ ููุชุธูุฉ
        
        <a href="/train-booking" style="color: #FFD700; text-decoration: underline;">ุงุฎุชุฑ ุฑุญูุชู</a>`,
        
        "ุทูุฑุงู": `ุฑุญูุงุชูุง ุงูุฌููุฉ:
        - ุทูุฑุงู ุฏุงุฎูู ุจูู ุฌููุน ุงููุทุงุฑุงุช
        - ุฃูุชุนุฉ ูุฌุงููุฉ (ุญุชู 20 ูุฌู)
        - ุฎุฏูุฉ ุงูุชูุตูู ูู ุงููุทุงุฑ
        - ุฃุณุนุงุฑ ุชูุงูุณูุฉ
        
        <a href="/flight-booking" style="color: #FFD700; text-decoration: underline;">ุงุญุฌุฒ ุชุฐูุฑุชู</a>`,
        
        "default": `ูุฑุญุจุงู ุจูู ูู NILEWAY! ๐โ๏ธ๐
        ููู ูููููู ูุณุงุนุฏุชู ูู ุญุฌุฒ ุฑุญูุชู ุงููุงุฏูุฉุ
        
        ููููู ุทุฑุญ ุฃุณุฆูุฉ ูุซู:
        - ููู ุงุญุฌุฒ ุชุฐูุฑุฉุ
        - ูุง ูู ูุณุงุฆู ุงูููุงุตูุงุช ุงููุชุงุญุฉุ
        - ูุง ูู ุทุฑู ุงูุฏูุน ุงูููุจููุฉุ
        - ููู ูููููู ุฅูุบุงุก ุงูุญุฌุฒุ`
    };
    
    let apiResponseText = faqResponses.default;
    const userQuestion = userData.message.toLowerCase();
    
    // ุชุญูู ูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ ุฃููุงู
    for (const [question, answer] of Object.entries(faqResponses)) {
        if (userQuestion.includes(question.toLowerCase())) {
            apiResponseText = answer;
            break;
        }
    }
    
    // ุฅุฐุง ูู ููู ุงูุณุคุงู ูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉุ ุงุณุชุฎุฏู API
    if (apiResponseText === faqResponses.default) {
        const requestOptions = {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: `ุฃูุช ูุณุงุนุฏ ูุดุฑูุฉ NILEWAY ุงููุชุฎุตุตุฉ ูู ุญุฌุฒ ูุณุงุฆู ุงูููุงุตูุงุช ูู ูุตุฑ. 
                        ุฃุฌูุจ ุนูู ุณุคุงู ุงูุนููู ุจุงุฎุชุตุงุฑ ููุถูุญ ูููุง ูุฎุต ุญุฌุฒ ุงูุฃุชูุจูุณุงุชุ ุงููุทุงุฑุงุชุ 
                        ูุงูุทูุฑุงู ุงูุฏุงุฎูู. ูุฌุจ ุฃู ุชููู ุงูุฅุฌุงุจุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู.
                        
                        ุฅุฐุง ูุงู ุงูุณุคุงู ุบูุฑ ูุชุนูู ุจุงูุญุฌุฒ ุฃู ุงูููุงุตูุงุชุ ุฃุฑุดุฏ ุงูุนููู ูุทุฑุญ ุณุคุงู ูุชุนูู ุจุฎุฏูุงุช NILEWAY.
                        
                        ุงูุณุคุงู: ${userData.message}`
                    }]
                }]
            })
        };

        try {
            const response = await fetch(API_URL, requestOptions);
            const data = await response.json();
            if (!response.ok) throw new Error(data.error.message);

            apiResponseText = data.candidates[0].content.parts[0].text
                .replace(/\*\*(.*?)\*\*/g, "$1")
                .trim();
        } catch (error) {
            console.log(error);
            apiResponseText = "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุฃู ุทุฑุญ ุณุคุงู ุขุฎุฑ ูุชุนูู ุจุฎุฏูุงุช NILEWAY.";
        }
    }
    
    messageElement.innerHTML = apiResponseText;
    incomingMessageDiv.classList.remove("thinking");
    
    // Enable voice response button
    playResponseBtn.disabled = false;
    playResponseBtn.onclick = () => speakText(apiResponseText.replace(/<[^>]*>/g, ''));
    
    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
}

//handle outgoing user messages
const handleOutgoingMessage = (e) => {
    e.preventDefault();
    userData.message = messageInput.value.trim();
    if (!userData.message) return;
    
    messageInput.value = "";
    messageInput.style.height = "auto";
    
    // create and display user message
    const messageContent = `
        <div class="message-text"></div>
    `;
    const outgoingMessageDiv = createMessageElement(messageContent, "user-message");
    outgoingMessageDiv.querySelector(".message-text").textContent = userData.message;
    chatBody.appendChild(outgoingMessageDiv);
    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });

    // Simulate bot response with thinking indicator after a delay
    setTimeout(() => {
        const messageContent = `
            <div class="message bot-message thinking">
                <svg class="bot-avatar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024">
                    <path d="M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z"></path>
                </svg>
                <div class="message-text"> 
                    <div class="thinking-indicator">
                        <div class="dot"></div>
                        <div class="dot"></div>
                        <div class="dot"></div>
                    </div>
                </div>
        `;
        const incomingMessageDiv = createMessageElement(messageContent, "bot-message", "thinking");
        chatBody.appendChild(incomingMessageDiv);
        chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
        generateBotResponse(incomingMessageDiv);
    }, 600);
}

// Event Listeners
document.querySelector(".chat-form").addEventListener("submit", handleOutgoingMessage);

messageInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleOutgoingMessage(e);
    }
});

// Auto-resize textarea
messageInput.addEventListener("input", function() {
    this.style.height = "auto";
    this.style.height = (this.scrollHeight) + "px";
});

chatbotToggler.addEventListener("click", () => {
    document.body.classList.toggle("show-chatbot");
    // Reset chatbot position when toggling
    if (document.body.classList.contains("show-chatbot")) {
        document.querySelector(".chatbot-popup").style.bottom = "100px";
    }
});

closeChatbotBtn.addEventListener("click", () => {
    document.body.classList.remove("show-chatbot");
});

// Initialize voice recognition when the page loads
window.addEventListener('load', () => {
    setupVoiceRecognition();
    
    // Initialize speech synthesis voices
    if ('speechSynthesis' in window) {
        // Chrome needs this
        if (window.speechSynthesis.getVoices().length === 0) {
            window.speechSynthesis.addEventListener('voiceschanged', () => {
                console.log("Voices loaded after event:", window.speechSynthesis.getVoices());
            });
        }
    }
});

// Play response button
playResponseBtn.addEventListener('click', function() {
    const lastBotMessage = document.querySelector('.chat-body .bot-message:not(.thinking) .message-text');
    if (lastBotMessage) {
        speakText(lastBotMessage.textContent || lastBotMessage.innerText);
    }
});